import std.stdio;
import std.algorithm;
import std.scan;

struct tricorder
{
  int ax = 1;
  int clk = 0;

  char[40][6] crt;

  union instruction
  {
    noop,
    addx(int),

    ~instruction() = default;
  }

  fn decode(std::string_view line) -> instruction
  {
    switch (line[0])
    {
      case 'n':
        if (line.starts_with("noop"))
          return noop;

      case 'a':
        if (line.starts_with("addx"))
        {
          var imm = 0;

          if (std::sscanf(line, "addx {}", &mut imm).error)
            std::panic("error scaning instruction from input '", line, "'");

          return addx(imm);
        }
    }

    std::panic("unknown instruction in decode");
  }

  fn execute(this mut &, instruction op) -> void
  {
    fn step[this]()
    {
      var x = this.clk % 40;
      var y = (this.clk / 40) % 6;

      this.crt[cast<usize>(y)][cast<usize>(x)] = (this.ax - 1 <= x && x <= this.ax + 1) ? '#' : ' ';

      this.clk += 1;
    }

    switch (op)
    {
      case noop:
        step();

      case addx[imm]:
        step();
        step();
        this.ax += imm;
    }
  }

  fn vsync(this &) -> void
  {
    for (var &row : this.crt)
    {
      for (var &ch : row)
        std::putc(ch);

      std::putc('\n');
    }
  }

  tricorder() = default;
  ~tricorder() = default;
}

fn main -> int
{
  try
  {
    var tricorder = tricorder();

    var fin = std::file::open("day10.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      tricorder.execute(tricorder::decode(line));
    }

    tricorder.vsync();

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
