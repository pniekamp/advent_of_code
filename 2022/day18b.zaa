import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

using position = (int, int, int);

fn main -> int
{
  const D = [(-1, 0, 0), (+1, 0, 0), (0, -1, 0), (0, +1, 0), (0, 0, -1), (0, 0, +1)];

  try
  {
    var count = 0;
    var cubes = std::vector<position>();

    var fin = std::file::open("day18.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var pt = position();

      if (std::sscanf(line, "{},{},{}", &mut pt.0, &mut pt.1, &mut pt.2).error)
        std::panic("error scaning cube location from input '", line, "'");

      cubes.push_back(pt);
    }

    var min = cubes[0];
    var max = cubes[0];

    for (var pt : cubes)
    {
      min.0 = std::min(min.0, pt.0 - 1);
      min.1 = std::min(min.1, pt.1 - 1);
      min.2 = std::min(min.2, pt.2 - 1);

      max.0 = std::max(max.0, pt.0 + 1);
      max.1 = std::max(max.1, pt.1 + 1);
      max.2 = std::max(max.2, pt.2 + 1);
    }

    var exterior = std::flat_hash_map<position, bool>();

    for (var stack = std::vector::from([(min.0, min.1, min.2)]); !stack.empty; )
    {
      for (var pt : stack.take(stack.begin, stack.end))
      {
        if (exterior.contains(pt))
          continue;

        exterior.insert(pt, true);

        for (var d : D)
        {
          if (!(min.0 <= pt.0 && pt.0 <= max.0 && min.1 <= pt.1 && pt.1 <= max.1 && min.2 <= pt.2 && pt.2 <= max.2))
            continue;

          if (cubes.find((pt.0 + d.0, pt.1 + d.1, pt.2 + d.2)) == cubes.end)
            stack.push_back((pt.0 + d.0, pt.1 + d.1, pt.2 + d.2));
        }
      }
    }

    for (var pt : cubes)
    {
      var surface = 0;

      for (var d : D)
      {
        if (exterior.contains((pt.0 + d.0, pt.1 + d.1, pt.2 + d.2)))
          surface += 1;
      }

      count += surface;
    }

    std::print("part2: surface area of scanned droplet ", count);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
