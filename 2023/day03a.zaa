import std.stdio;
import std.algorithm;
import std.scan;

struct map
{
  std::vector<std::string> cells;

  fn span(this &map, int x, int y, usize len) -> std::string_view
  {
    if (y < 0 || y >= cast(map.cells.len))
      return std::string_view();

    var j = cast<usize>(y);
    var i0 = std::min(cast<usize>(std::max(x, 0)), map.cells[j].len);
    var i1 = std::min(cast<usize>(std::max(x + cast<int>(len), 0)), map.cells[j].len);

    return map.cells[j][i0 .. i1];
  }

  map() = default;
  ~map() = default;
}

fn main -> int
{
  try
  {
    var map = map();

    var fin = std::file::open("day03.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      map.cells.push_back(line);
    }

    var sum = 0;

    for (var y = 0, var &line : map.cells;; ++y)
    {
      for (var x = 0; x < cast(line.len); ++x)
      {
        var n = 0;

        if (var len = std::sscanf(map.span(x, y, 8), "{}", &mut n).len; n > 0)
        {
          var adjacent = false;

          for(var j = y - 1; j <= y + 1; ++j)
          {
            if (std::any_of(map.span(x - 1, j, len + 2), |cell| !std::is_digit(cell) && cell != cast('.')))
              adjacent = true;
          }

          if (adjacent)
            sum += cast<i64>(n);

          x += cast(len);
        }
      }
    }

    std::print("part1: sum of part numbers ", sum);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
