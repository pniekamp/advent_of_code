import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

struct record
{
  std::string springs;
  std::vector<usize> damaged;

  record() = default;
  record(record&&) = default;
  ~record() = default;
}

fn main -> int
{
  try
  {
    var records = std::vector<record>();

    var fin = std::file::open("day12.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var (springs, groups) = line.cut(' ');

      var mut &record = records.push_back();
      record.springs = springs;
      record.damaged = std::vector::from(groups.split(",").transform(|group| { var n = usize(0); std::atoi(group.begin, group.end, &mut n); return n; }));
    }

    var arrangements = 0;
    var stack = std::vector<std::string_view>();

    for (var &record : records)
    {
      stack.push_back(record.springs);

      for (var run : record.damaged)
      {
        for(var thread : stack.take(stack.begin, stack.end))
        {
          while (!thread.empty)
          {
            if (std::count_if(thread.take_n(run), |k| k == cast('#') || k == cast('?')) == run)
            {
              if (!thread.remove_prefix(run).starts_with('#'))
                stack.push_back(thread.remove_prefix(std::min(thread.len, run + 1)));
            }

            if (thread.starts_with('#'))
              break;

            thread.remove_prefix!(1);
          }
        }
      }

      for (var thread : stack.take(stack.begin, stack.end))
      {
        if (std::none_of(thread, |remaining| remaining == cast('#')))
          arrangements += 1;
      }
    }

    std::print("part1: arrangements count ", arrangements);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
