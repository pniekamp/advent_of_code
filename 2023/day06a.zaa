import std.stdio;
import std.algorithm;
import std.scan;

struct races
{
  std::vector<int> times;
  std::vector<int> distances;

  races() = default;
  races(races&) = default;
  ~races() = default;
}

fn simulate(int time, int pressed) -> int
{
  var speed = pressed;
  var distance = speed * (time - pressed);

  return distance;
}

fn main -> int
{
  try
  {
    var races = races();

    var fin = std::file::open("day06.txt");
    var reader = std::buffered_reader(&mut fin);

    var buffer1 = std::string();
    std::read_line(&mut reader, &mut buffer1);

    for (var line = buffer1.trim.strip_prefix("Time:"); !line.empty; )
    {
      var time = 0;
      line.remove_prefix!(std::sscanf(line, " {}", &mut time).len);

      races.times.push_back(time);
    }

    var buffer2 = std::string();
    std::read_line(&mut reader, &mut buffer2);

    for (var line = buffer2.trim.strip_prefix("Distance:"); !line.empty; )
    {
      var distance = 0;
      line.remove_prefix!(std::sscanf(line, " {}", &mut distance).len);

      races.distances.push_back(distance);
    }

    var ways = 1;

    for (var (time, distance) : std::zip(races.times, races.distances))
    {
      var wins = 0;

      for (var j = 0; j <= time; ++j)
      {
        if (simulate(time, j) > distance)
          wins += 1;
      }

      ways *= wins;
    }

    std::print("part1: ways to win ", ways);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
