import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.priority_queue;
import std.scan;

struct map
{
  std::vector<std::string> tiles;

  fn at(this &map, int x, int y) -> char
  {
    if (0 <= y && cast<usize>(y) < map.tiles.len && 0 <= x && cast<usize>(x) < map.tiles[cast<usize>(y)].len)
      return cast<char>(map.tiles[cast<usize>(y)][cast<usize>(x)]);

    return '#';
  }

  map() = default;
  ~map() = default;
}

fn main -> int
{
  try
  {
    var map = map();

    var fin = std::file::open("day17.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      map.tiles.push_back(line);
    }

    struct node
    {
      (int, int) p;
      (int, int) dp;
      int momentum;

      node((int, int) p, (int, int) dp, int momentum)
        : p(p), dp(dp), momentum(momentum)
      {
      }

      fn ==(node &, node &) -> bool = default;

      node(node&&) = default;
      fn =(node mut &, node &&) -> node mut & = default;
      ~node() = default;
    }

    var queue = std::priority_queue<(node, int), Cmp: typeof(|x, y| y.1 < x.1)>();
    var visited = std::flat_hash_map<node, int>();

    queue.push_back(node((0, 0), (1, 0), 0), 0);
    queue.push_back(node((0, 0), (0, 1), 0), 0);

    while (!queue.empty)
    {
      var [node, weight] = queue.take_front();

      if (var j = visited.find(node); j != visited.end && visited[j].value <= weight)
        continue;

      var np = (node.p.0 + node.dp.0, node.p.1 + node.dp.1);

      switch (var ch = map.at(np.0, np.1))
      {
        case '0' ..= '9':
          if (node.momentum < 2)
            queue.push_back(node(np, node.dp, node.momentum + 1), weight + cast<int>(ch - '0'));
          queue.push_back(node(np, (+node.dp.1, +node.dp.0), 0), weight + cast<int>(ch - '0'));
          queue.push_back(node(np, (-node.dp.1, -node.dp.0), 0), weight + cast<int>(ch - '0'));
      }

      visited.insert_or_assign(node, weight);
    }

    var loss = visited
         .filter(|node| node.key.p.0 == cast<int>(map.tiles.back.len - 1) && node.key.p.1 == cast<int>(map.tiles.len - 1))
         .transform(|node| node.value)
         .min;

    std::print("part1: least heat loss ", loss?!);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
