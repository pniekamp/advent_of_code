import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn main -> int
{
  try
  {
    var cnt = 0;
    var network = std::flat_hash_map<std::string, std::flat_hash_map<std::string, void>>();

    var fin = std::file::open("day23.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var lhs = std::string_view();
      var rhs = std::string_view();

      if (!std::sscanf(line, "{}-{}", &mut lhs, &mut rhs))
        std::panic("error scaning network from input '", line, "'");

      network.emplace(lhs).insert(rhs);
      network.emplace(rhs).insert(lhs);
    }

    var visited = std::flat_hash_map<std::string, void>();

    for (var &[machine, connections] : network)
    {
      if (!machine.starts_with('t'))
        continue;

      var connected = std::vector::from(connections.transform(|kv| kv.key.view)).sort!;

      for (;;)
      {
        if (network[connected[0]].contains(connected[1]))
          if (!visited.contains(connected[0]) && !visited.contains(connected[1]))
            cnt += 1;

        if (!std::next_combination(&mut connected, connected.begin + 2))
          break;
      }

      visited.insert(machine);
    }

    std::print("part1: connected networks ", cnt);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
