import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn main -> int
{
  try
  {
    var network = std::flat_hash_map<std::string, std::flat_hash_map<std::string, void>>();

    var fin = std::file::open("day23.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var lhs = std::string_view();
      var rhs = std::string_view();

      if (!std::sscanf(line, "{}-{}", &mut lhs, &mut rhs))
        std::panic("error scaning network from input '", line, "'");

      network.emplace(lhs).insert(rhs);
      network.emplace(rhs).insert(lhs);
    }

    var password = std::string();

    for (var &[machine, connections] : network)
    {
      var connected = std::vector::from(connections.transform(|kv| kv.key.view)).sort!;

      for (var k = password.len / 3; k < connected.len; ++k)
      {
        for (;;)
        {
          var all = true;

          for (var i = 0; i < k; ++i)
            for (var j = i + 1; j < k; ++j)
              all &= network[connected[i]].contains(connected[j]);

          if (all)
          {
            var candidate = std::join(std::vector::from(std::chain([machine.view], connected[0 .. k])).sort!, ",");

            if (password.len < candidate.len)
              password = candidate;
          }

          if (!std::next_combination(&mut connected, connected.begin + k))
            break;
        }
      }
    }

    std::print("part2: lan password ", password);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
