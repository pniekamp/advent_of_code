import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn main -> int
{
  try
  {
    var cnt = 0;
    var keys = std::vector<std::vector<int>>();
    var locks = std::vector<std::vector<int>>();

    var fin = std::file::open("day25.txt");
    var reader = std::buffered_reader(&mut fin);

    while (!reader.fetch.empty)
    {
      var width = 0;
      var heights = std::vector<int>();

      for (var line : reader.lines)
      {
        if (line.empty)
          break;

        heights.resize(line.len);

        for (var &[i, ch] : std::enumerate(line.chars))
          if (ch == '#')
            heights[i] += 1;

        width = line.count(cast<u8>('#'));
      }

      if (width == 0)
        locks.push_back(&move heights);
      else
        keys.push_back(&move heights);

      std::skip_line(&mut reader);
    }

    for (var &key : keys)
    {
      for (var &lock : locks)
      {
        if (std::all_of(std::zip(key, lock), |k| k.0 + k.1 <= 7))
          cnt += 1;
      }
    }

    std::print("part1: lock/key pairs ", cnt);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
