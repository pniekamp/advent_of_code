import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn main -> int
{
  try
  {
    var num = 0;
    var wires = std::flat_hash_map<std::string, u64>();
    var gates = std::vector<(std::string, std::string, std::string, std::string)>();

    var fin = std::file::open("day24.txt");
    var reader = std::buffered_reader(&mut fin);

    for (var line : reader.lines)
    {
      if (line.empty)
        break;

      var name = std::string_view();
      var value = u64();

      if (!std::sscanf(line, "{}: {}", &mut name, &mut value))
        std::panic("error scaning wire from input '", line, "'");

      wires.insert(name, value);
    }

    std::skip_line(&mut reader);

    for (var line : reader.lines)
    {
      var lhs = std::string_view();
      var op = std::string_view();
      var rhs = std::string_view();
      var out = std::string_view();

      if (!std::sscanf(line, "{} {} {} -> {}", &mut lhs, &mut op, &mut rhs, &mut out))
        std::panic("error scaning gate from input '", line, "'");

      gates.push_back((lhs, op, rhs, out));
    }

    var stack = std::vector::from(std::iota(0, gates.len));

    while (!stack.empty)
    {
      for (var n : stack)
      {
        var lhs = wires.get(gates[n].0);
        var rhs = wires.get(gates[n].2);

        if (lhs.is_some && rhs.is_some)
        {
          var &op = gates[n].1;
          var &out = gates[n].3;

          switch (op)
          {
            case "AND":
              wires.insert(out, lhs?! & rhs?!);

            case "OR":
              wires.insert(out, lhs?! | rhs?!);

            case "XOR":
              wires.insert(out, lhs?! ^ rhs?!);
          }
        }
      }

      stack.erase_if(|n| wires.contains(gates[n].3));
    }

    rof (var &output : std::vector::from(wires.filter(|kv| kv.key.starts_with('z')).transform(|kv| (kv.key, kv.value))).sort!)
      num = (num << 1) | output.1;

    std::print("part1: number ", num);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
