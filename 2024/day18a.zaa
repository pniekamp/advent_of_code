import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

struct map
{
  std::vector<std::string> tiles;

  fn at(this &map, int x, int y) -> char
  {
    if (0 <= y && cast<usize>(y) < map.tiles.len && 0 <= x && cast<usize>(x) < map.tiles[cast<usize>(y)].len)
      return cast<char>(map.tiles[cast<usize>(y)][cast<usize>(x)]);

    return '#';
  }

  fn init(this mut &map, usize w, usize h, usize n, std::vector<(int, int)> &bytes) -> void
  {
    map.tiles.resize(h);
    for (var j = 0; j < h; ++j)
      map.tiles[j].resize(w);

    for (var j = 0; j < h; ++j)
      for (var i = 0; i < w; ++i)
        map.tiles[j][i] = cast('.');

    for (var i = 0; i < n; ++i)
      map.tiles[cast<usize>(bytes[i].1)][cast<usize>(bytes[i].0)] = cast('#');
  }

  map() = default;
  ~map() = default;
}

fn main -> int
{
  try
  {
    var map = map();
    var bytes = std::vector<(int, int)>();

    var fin = std::file::open("day18.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var xy = (int(0), int(0));

      if (!std::sscanf(line, "{},{}", &mut xy.0, &mut xy.1))
        std::panic("error scaning positions from input '", line, "'");

      bytes.push_back(xy);
    }

    map.init(71, 71, 1024, bytes);

    var steps = 0;
    var stack = std::vector<(int, int)>::from([(0, 0)]);
    var visited = std::flat_hash_map<(int, int), int>();

    while (stack.len != 0)
    {
      for (var p : stack.take(stack.begin, stack.end))
      {
        if (!visited.insert((p.0, p.1), steps).1)
          continue;

        for (var dp : [ (0, -1), (1, 0), (0, 1), (-1, 0) ])
        {
          var np = (p.0 + dp.0, p.1 + dp.1);

          if (map.at(np.0, np.1) == '.')
            stack.push_back(np);
        }
      }

      steps += 1;
    }

    std::print("part1: minimum steps needed ", visited[(70, 70)]);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
