import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn match(std::vector<std::string_ref> &patterns, std::string_view design) -> usize
{
  if (design.empty)
    return 1;

  static cache = #std::flat_hash_map<std::string_view, usize>();

  if (var j = cache.find(design); j != cache.end)
    return cache[j].value;

  var cnt = 0;

  for (var &pattern : patterns)
  {
    if (design.starts_with(pattern))
      cnt += match(patterns, design[pattern.len .. design.len]);
  }

  cache.insert(design, cnt);

  return cnt;
}

fn main -> int
{
  try
  {
    var matches = 0;

    var text = std::readfile("day19.txt");
    var reader = std::string_stream(text);

    var buffer = std::string();
    std::read_line(&mut reader, &mut buffer);
    var patterns = std::vector::from(buffer.chomp.split(", "));

    std::skip_line(&mut reader);

    for (var line : reader.lines)
    {
      matches += match(patterns, line.view);
    }

    std::print("part2: possible designes ", matches);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
