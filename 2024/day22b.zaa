import std.stdio;
import std.algorithm;
import std.flat_hash_map;
import std.scan;

fn main -> int
{
  try
  {
    var max = 0;
    var market = std::flat_hash_map<(int, int, int, int), int>();

    var fin = std::file::open("day22.txt");

    for (var line : std::buffered_reader(&mut fin).lines)
    {
      var secret = u64();

      if (!std::sscanf(line, "{}", &mut secret))
        std::panic("error scaning secret from input '", line, "'");

      var prices = std::vector<int>();

      for (var k = 0; k < 2000; ++k)
      {
        secret = ((secret * 64) ^ secret) % 16777216;
        secret = ((secret / 32) ^ secret) % 16777216;
        secret = ((secret * 2048) ^ secret) % 16777216;

        prices.push_back(cast<int>(secret % 10));
      }

      var changes = prices.adjacent<2>.transform(|k| k.1 - k.0);

      var visited = std::flat_hash_map<(int, int, int, int), void>();

      for (var [index, sequence] : std::enumerate(changes.adjacent<4>))
      {
        if (!visited.insert(sequence).1)
          continue;

        market.emplace(std::tuple(sequence...)) += prices[index + 4];
      }
    }

    max = std::max(market.transform(|kv| kv.value))?!;

    std::print("part2: maximum bananas ", max);

  }
  catch(std::error e)
  {
    std::panic(e);
  }

  return 0;
}
